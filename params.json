{"name":"spotifyd(8)","tagline":"A spotify playing daemon in the spirit of MPD","body":"\r\n```\r\n~ $ sc () { echo $@ | socat - UNIX-CONNECT:/tmp/spotifyd 2>/dev/null; }\r\n~ $ sc \"search Art Blakey\" #search for songs by Art Blakey\r\n0 | Moanin' | Art Blakey & The Jazz Messengers\r\n1 | Moanin' | Art Blakey\r\n[...]\r\n98 | Salute To Birdland | Art Blakey\r\n99 | Quicksilver | Art Blakey\r\n~ $ sc qadd 0 #add the first search result to queue\r\nAdding: Moanin' | Art Blakey & The Jazz Messengers\r\n~ $ sc play 0 #play the first song in the queue\r\nPlaying: Moanin' | Art Blakey & The Jazz Messengers\r\n~ $\r\n```\r\n### Introduction\r\nSpotifyd aims to be a suckless alternative to the official spotify client for linux.\r\nIt uses the same client/server model as the popular MPD. This means that you can have\r\na server running on one computer, a raspberry pi for example, and the control it from\r\nany other machines on the network. Neat huh? It's very lightweight and will run on basically\r\nany hardware you can imagine.\r\n\r\n### Installation\r\nThis couldn't be easier. A simple:\r\n```\r\nmake && sudo make install\r\n```\r\nwill install spotifyd. If you're running Arch Linux, you might want to install it from the [AUR](https://aur.archlinux.org/packages/spotifyd/) instead.\r\n\r\n### Configuration\r\nA simple configuration file is read from `$HOME/.spotifyd.rc`. It looks like this:\r\n```\r\nusername my_user_name\r\npassword my_password\r\nunix-socket /tmp/spotifyd\r\nport 12345\r\n```\r\nThe server can be configured to listen on a unix socket, a network socket, or both.\r\n\r\n### Dependencies\r\nSpotifyd depends on libspotify and alsa to be installed (this basically means that you must be running linux).\r\n\r\n### More advanced usage\r\nAdd many songs:\r\n```\r\n~ $ sc search rolling stones | head\r\n0 | Gimme Shelter | The Rolling Stones\r\n1 | Paint It Black | The Rolling Stones\r\n2 | (I Can't Get No) Satisfaction - (Original Single Mono Version) | The Rolling Stones\r\n3 | Start Me Up - Remastered | The Rolling Stones\r\n4 | Sympathy For The Devil | The Rolling Stones\r\n5 | Angie - Remastered | The Rolling Stones\r\n6 | Sympathy For The Devil | The Rolling Stones\r\n7 | Rolling Stones T-Shirt - Radio Edit | Dada Life\r\n8 | (I Can't Get No) Satisfaction - Mono Version | The Rolling Stones\r\n9 | Brown Sugar - 2009 Re-Mastered Digital Version | The Rolling Stones\r\n~ $ for i in `seq 0 9`; do sc qadd $i; done\r\nAdding: Gimme Shelter | The Rolling Stones\r\nAdding: Paint It Black | The Rolling Stones\r\nAdding: (I Can't Get No) Satisfaction - (Original Single Mono Version) | The Rolling Stones\r\nAdding: Start Me Up - Remastered | The Rolling Stones\r\nAdding: Sympathy For The Devil | The Rolling Stones\r\nAdding: Angie - Remastered | The Rolling Stones\r\nAdding: Sympathy For The Devil | The Rolling Stones\r\nAdding: Rolling Stones T-Shirt - Radio Edit | Dada Life\r\nAdding: (I Can't Get No) Satisfaction - Mono Version | The Rolling Stones\r\nAdding: Brown Sugar - 2009 Re-Mastered Digital Version | The Rolling Stones\r\n~ $ sc qlist\r\n0 | Moanin' | Art Blakey & The Jazz Messengers\r\n1 | Gimme Shelter | The Rolling Stones\r\n2 | Paint It Black | The Rolling Stones\r\n3 | (I Can't Get No) Satisfaction - (Original Single Mono Version) | The Rolling Stones\r\n4 | Start Me Up - Remastered | The Rolling Stones\r\n5 | Sympathy For The Devil | The Rolling Stones\r\n6 | Angie - Remastered | The Rolling Stones\r\n7 | Sympathy For The Devil | The Rolling Stones\r\n8 | Rolling Stones T-Shirt - Radio Edit | Dada Life\r\n9 | (I Can't Get No) Satisfaction - Mono Version | The Rolling Stones\r\n10 | Brown Sugar - 2009 Re-Mastered Digital Version | The Rolling Stones\r\n~ $\r\n```\r\nLets say that I don't want those two duplicate songs?\r\n```\r\n~ $ for i in $(sc search rolling stones | head | sed 's/[:-]/|/g' | sort -u -t'|' -k2,2 | sort -t'|' -k1,1 | cut -d'|' -f1); do sc qadd $i; done\r\nAdding: Gimme Shelter | The Rolling Stones\r\nAdding: Paint It Black | The Rolling Stones\r\nAdding: (I Can't Get No) Satisfaction - (Original Single Mono Version) | The Rolling Stones\r\nAdding: Start Me Up - Remastered | The Rolling Stones\r\nAdding: Sympathy For The Devil | The Rolling Stones\r\nAdding: Angie - Remastered | The Rolling Stones\r\nAdding: Rolling Stones T-Shirt - Radio Edit | Dada Life\r\nAdding: Brown Sugar - 2009 Re-Mastered Digital Version | The Rolling Stones\r\n~ $ sc qlist\r\n0 | Gimme Shelter | The Rolling Stones\r\n1 | Paint It Black | The Rolling Stones\r\n2 | (I Can't Get No) Satisfaction - (Original Single Mono Version) | The Rolling Stones\r\n3 | Start Me Up - Remastered | The Rolling Stones\r\n4 | Sympathy For The Devil | The Rolling Stones\r\n5 | Angie - Remastered | The Rolling Stones\r\n6 | Rolling Stones T-Shirt - Radio Edit | Dada Life\r\n7 | Brown Sugar - 2009 Re-Mastered Digital Version | The Rolling Stones\r\n~ $\r\n```\r\nOkay, so no one would do that in practice. The point is just that\r\nthe standard shell along with the unix tools are really powerful\r\nand allows you to do manage the queue efficiently. For a list of all possible\r\ncommands, send `help` to the server:\r\n```\r\n~ $ sc help\r\nUsage:\r\n \t SEARCH str  - Searches spotify for str.\r\n \t CUR_PLAYING - Returns the currently playing song.\r\n \t QLIST       - List content of the queue.\r\n \t SLIST       - List search results.\r\n \t QRAND       - Toggle queue randomness on/off.\r\n \t QADD n      - Add song n from search results to queue.\r\n \t QCLEAR      - Clear the queue.\r\n \t QRM n       - Remove track n from queue.\r\n \t PLAY n      - Play song n in queue.\r\n \t PREV        - Play previous song.\r\n \t NEXT        - Play next song.\r\n \t PAUSE       - Toggle play/pause.\r\n \t PL          - List available playlists.\r\n \t PLCREATE s  - Create new playlist with name s.\r\n \t PLDELETE n  - Delete playlist n.\r\n \t SADDPL n    - Put playlist n in search list.\r\n \t QADDPL n    - Put playlist n in queue.\r\n \t PLADD n p   - Add track n from queue to playlist p. \r\n \t PLRM n p    - Remove track n from playlist p.\r\n~ $\r\n```\r\n\r\n### License\r\nThe project is licensed under GPLv3 with the exception of the files audio.h,\r\naudio.c and alsa-audio.c that are from the libspotify examples. The function\r\n`on_music_delivered` in callbacks.c is also from the libspotify documentation.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}